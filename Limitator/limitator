#!/bin/bash

clear

echo "############################################################################"
echo "############################################################################"
echo "#####                                                                  #####"
echo "#####              Password expiration management script               #####"
echo "#####                      By KLF pour La Capsule                      #####"
echo "#####                                                                  #####"
echo "############################################################################"
echo "############################################################################"

read -p "Press any key to continue..." -n1 -s


# This script creates an expire.sh file in /etc/profile.d/
# and adds an environment variable END_OF_SERVICE
# which contains the password expiration timestamp


## if year + 1 % 4 = 0 && month > 02 => timestamp 31702400
## if year % 4 = 0 && month < 03 => timestamp 31702400
## else => timestamp 31616000

# Define the timestamps for leap and non-leap years
BIS_TIMESTAMP=31702400
NONBIS_TIMESTAMP=31616000
# Get the current year and month
CURRENT_YEAR=$(date +%Y)
CURRENT_MONTH=$(date +%m)
# Initialize the END_OF_SERVICE variable to 0
END_OF_SERVICE=0;
# Get the current date in seconds in Unix epoch
CURRENT_DATE=$(date +%s)
# Initialize the variable to check internet connection status (0 = not connected)
IS_CONNECTED=0
# Define the directory and file for environment variables
ENV_VAR_DIR=/etc/profile.d/
ENV_VAR_FILE=expire.sh
WORKING_DIR=$(dirname "$(readlink -f "$0")")
SYSTEMD_DIR=/etc/systemd/system/
LOG_DIR=/var/log/limitator/
LOG_FILE=limitator.log
SCRIPT_DEST_DIR=/opt/bin/limitator/

(echo 5; sleep 0.05
echo 10; sleep 0.05
echo 15; sleep 0.05
echo 20; sleep 0.05
echo 25; sleep 0.05
echo 30; sleep 0.05
echo 35; sleep 0.05
echo 40; sleep 0.05
echo 45; sleep 0.05
echo 50; sleep 0.05
echo 55; sleep 0.05
echo 60; sleep 0.05
echo 65; sleep 0.05
echo 70; sleep 0.05
echo 75; sleep 0.05
echo 80; sleep 0.05
echo 85; sleep 0.05
echo 90; sleep 0.05
echo 95; sleep 0.05
echo 100; sleep 0.05) | zenity --progress \
    --title="Limitator" \
    --text="Initializing..." \
    --percentage=0 \
    --auto-close \
    --no-cancel


function log_Creation(){
    ## Create the log files and directory if it doesn't exist
    (
    if [[ -d $LOG_DIR ]]; then
        echo "Le répertoire $LOG_DIR existe déjà."
        echo 20; sleep 0.5
    else
        echo "# Création du répertoire $LOG_DIR"
        sudo mkdir -p $LOG_DIR
        echo 20; sleep 0.5
    fi

    if [[ -f $LOG_DIR$LOG_FILE ]]; then
        echo "Le fichier $LOG_FILE existe déjà."
        echo 30; sleep 0.5
    else
        echo "# Création du fichier $LOG_FILE"
        echo 30; sleep 0.05
        echo 35; sleep 0.05
        sudo touch $LOG_DIR$LOG_FILE
        sudo chmod 644 $LOG_DIR$LOG_FILE
        echo 40; sleep 0.05
        echo 45; sleep 0.05
        echo "# Changing $LOG_FILE autorisations"
        echo 60; sleep 2
    fi
    echo "New entry : $(date +%d-%m-%Y)" > $LOG_DIR$LOG_FILE
    echo 100; sleep 0.05) | zenity --progress \
        --title="Progress" \
        --text="Creating log files..." \
        --percentage=0 \
        --width=500 \
        --auto-close
}
function create_File(){
    file_path=$1 # Name or Path of the file in the working directory (ex: /home/goupil/file.txt or file.txt)
    dest_path=$2 # Destination path of the file (ex: /etc/profile.d/file.txt)
    owner=$3     # Owner of the file (ex: root:root)
    permissions=$4 # Permissions of the file (ex: 744)

    if [ -z $1 || -z $2 ]; then
        echo "Usage: create_File <file_path> <dest_path>"
        return 1
    fi
    
    if [[ -f $dest_path ]]; then
        echo "Le fichier $dest_path existe déjà."
        echo "# Suppression du fichier $dest_path"
        sudo rm -f $dest_path # check if ok
        echo "# Création d'un nouveau fichier $dest_path"
    else
        echo "# Le fichier $dest_path n'existe pas. Création du fichier."
    fi
    sudo touch $dest_path # check if ok
    if [ ! -z $owner ]; then
        sudo chown $owner $dest_path # check if ok
    fi
    if [ ! -z $permissions ]; then
        sudo chmod $permissions $dest_path # check if ok
    fi
}

function file_Creation(){
    ## Create the expire.sh file in /etc/profile.d/ if it doesn't exist
    (

    # Refactorisé ok
    create_File $ENV_VAR_FILE $ENV_VAR_DIR$ENV_VAR_FILE "root:root" "744"
    
    echo 50; sleep 2
    echo "# Creating environnement variable END_OF_SERVICE"
    sudo echo "export END_OF_SERVICE=$END_OF_SERVICE" > $ENV_VAR_DIR$ENV_VAR_FILE
    
    ) | zenity --progress --title="Progress" --text="Creating files..." --percentage=0 --width=500
}


# Function to check if the system is connected to the internet
function check_Internet_Connection(){
    # Use wget to check if Google is reachable (silent mode)
    (
    echo "# testing internet connection..."
    wget -q --spider http://google.com
    # Check the exit status of the wget command
    if [[ $? -eq 0 ]]; then
        do_log "OK 1x000 => expire.sh Created successfully"
        echo 20; sleep 2
        echo "# Host is connected to internet"
        echo 70; sleep 1

        IS_CONNECTED=1
    else
        echo 20; sleep 2
        echo "# No internet connection found, this program need an internet connection to work properly"
        echo "# Cancelling installation..."
        echo 70; sleep 2
        do_log "Err:1x002 => Unable to reach server : http://google.com, make sure you are connected to the internet and check your nameserver or firewall rules"
        return 1
        exit 1
    fi
    ) | zenity --progress --title="Progress" --text="Checking internet connection..." --percentage=0 --width=500 --auto-close
}

## Enable NTP Synchronization
function year_Check(){
    echo $CURRENT_MONTH
    if [[ $IS_CONNECTED == 1 ]]; then
        
        sudo timedatectl set-ntp true # check if ok
        echo 40; sleep 3
        
    fi

    # Check if current year is a leap year or not and set the expiration timestamp accordingly
    if (( $CURRENT_YEAR % 4 == 0 )) && (( $CURRENT_MONTH > 2 )); then
        EXPIRE_TIMESTAMP=$BIS_TIMESTAMP
    elif (( ($CURRENT_YEAR + 1) % 4 == 0 )) && (( $CURRENT_MONTH < 3 )); then
        
        EXPIRE_TIMESTAMP=$BIS_TIMESTAMP
    else
        EXPIRE_TIMESTAMP=$NONBIS_TIMESTAMP
    fi
    END_OF_SERVICE=$(($CURRENT_DATE + $EXPIRE_TIMESTAMP))
    (
    echo "# Enabling time synchronization..."
    echo 10; sleep 0.5
    echo 100; sleep 0.5
    echo "# NTP synchronization enabled successfully!"
    echo "# Checking if the current year is a leap year or not..."
    echo 60; sleep 0.5
    echo "# TimeStamp set..."
    echo 70; sleep 0.5
    ) | zenity --progress \
        --title="Progress" \
        --text="Checking year..." \
        --percentage=0 \
        --width=500 \
        --auto-close
    END_OF_SERVICE_DATE=$(date -d @$END_OF_SERVICE +%d-%m-%Y)
    echo $END_OF_SERVICE_DATE
    zenity --info \
        --title="Limitator" \
        --text="This system is enabled until $END_OF_SERVICE_DATE" \
        --width=300
}

#function rebooter(){
#    echo 'A Reboot is needed to apply the new configuration to the host'
#    echo 'reboot now ? [y/N]'
#    read answer 1>$LOG_DIR$LOG_FILE 2>&1#

#    if [[ $answer -eq 'y' ]]; then
#        echo "Rebooting now..." 1>$LOG_DIR$LOG_FILE 2>&1
#        sleep 2
#        sudo reboot 1>$LOG_DIR$LOG_FILE 2>&1
#    elif [[ $answer -eq 'n' ]]; then
#        echo "Reboot cancelled. You will need to reboot the system manualy to apply the new configuration." 1>$LOG_DIR$LOG_FILE 2>&1
#    else
#        echo "Invalid response. Please answer with 'y' or 'n'."
#        rebooter
#    fi
#}


function service_Creation(){
    ## Create the timeout.service file in /etc/systemd/system/ if it doesn't exist
    (
    echo "# Installing notify-osd..."
    #sudo apt update && sudo apt install notify-osd -y # check if ok

    if [[ -f $SYSTEMD_DIR/timeout.service ]]; then
        echo "Le fichier timeout.service existe déjà."
        echo "# Suppression du fichier timeout.service"
        sudo rm -f $SYSTEMD_DIR/timeout.service # check if ok
        echo 10; sleep 1

        echo "# Création d'un nouveau fichier timeout.service"
        echo 30; sleep 1
    else
        echo "# Le fichier timeout.service n'existe pas. Création du fichier."
        echo 30; sleep 1
    fi
    
    sudo chmod 777 $WORKING_DIR/timeout.service 
    sudo mv $WORKING_DIR/timeout.service $SYSTEMD_DIR

    if [[ $? -eq 0 ]]; then
        do_log "OK 6x000 => timeout.service crées avec success"
    else
        do_log "ERROR Err:6x001 => Failed to copy timeout.service, make sure you are running this script as root or with sudo"
        return 1
    fi


    echo "# Enabling the timeout.service..."
    sudo systemctl enable timeout.service # check if ok
    if [[ $? -eq 0 ]]; then
        echo "# timeout.service enabled successfully!"
        echo 70; sleep 1
    else
        do_log "ERROR Err:0x005 => Failed to enable timeout.service. Please check the README file for more information, or see https://github.com/KlayFouly/KLFToolBox for detailed information on this error." 
        exit 1
    fi

    sudo systemctl start timeout.service # check if ok
    if [[ $? -eq 0 ]]; then
        echo "# timeout.service started successfully!"  
    else
        do_log "ERROR Err:0x005 => Failed to start timeout.service. Please check the README file for more information, or see https://github.com/KlayFouly/KLFToolBox for detailed information on this error." 
    fi
    echo 50; sleep 1
    echo 100; sleep 0.5
    ) | zenity --progress \
        --title="Progress" \
        --text="Creating service..." \
        --percentage=0 \
        --width=500 \
        --auto-close
}

function scripts_Encription(){
    zenity --question \
        --title="Limitator" \
        --text="The scripts will now be encrypted, are you sure you want to continue ? (You won't be able to edit the script once this is done)" \
        --width=300 \
        --ok-label="Yes" \
        --cancel-label="No"

    if [[ $? -ne 0 ]]; then
        do_log "WARNING Encryption cancelled..."
        zenity --info \
            --title="Limitator" \
            --text="Encryption cancelled, Exiting program..." \
            --width=300
        exit 1
    else
        (
        echo "# Encryption started..." # check if ok
        echo 10;sleep 0.5
        ## Check if shc is installed
        if [[ $(dpkg -l | grep shc) ]];then
            echo "shc is already installed" # check if ok
            echo "# Starting the script encryption..."
            echo 20; sleep 1
        else
            echo "# shc is not installed. Installing shc..."
            echo 20; sleep 0.1
            sudo apt-get update -y # check if ok
            sudo apt-get install shc -y # check if ok
        fi
        echo 50; sleep 0.5
        echo "# Encrypting scripts..."
        sudo shc -v -r -f $WORKING_DIR/bloque_utilisateur -o $WORKING_DIR/bloque_utilisateur
        if [[ $? -eq 0 ]]; then
            echo "# Fichier bloque_utilisateur Crypté avec succées!"
            echo 70; sleep 1
        else
            do_log "ERROR Err:0x005 => Failed to encrypt bloque_utilisateur. Please check the README file for more information, or see https://github.com/KlayFouly/KLFToolBox for detailed information on this error."
            exit 1
        fi
        sudo shc -v -r -f $WORKING_DIR/date-checker -o $WORKING_DIR/date-checker
        if [[ $? -eq 0 ]]; then
            echo "# Fichier date_checker Crypté avec succées!"
            echo 70; sleep 1
        else
            do_log "ERROR Err:0x005 => Failed to encrypt date_checker. Please check the README file for more information, or see https://github.com/KlayFouly/KLFToolBox for detailed information on this error."
            exit 1
        fi
        echo 70; sleep 1
        echo "# Copying the encrypted scripts to $SCRIPT_DEST_DIR"
        sudo chmod +x $WORKING_DIR/bloque_utilisateur # check if ok
        sudo chmod +x $WORKING_DIR/date-checker # check if ok
        echo 100; sleep 0.5
        ) | zenity --progress \
            --title="Progress" \
            --text="Encrypting scripts..." \
            --percentage=0 \
            --width=500 \
            --auto-close

    fi
}

function display_Result(){
    sleep 2
    echo $'\n\n'
    echo "End of service timestamp : $END_OF_SERVICE"
    echo "Ce pc est activé jusqu'au : "$(date -d @$END_OF_SERVICE +%d-%m-%Y)
    echo "Don't forget to remove this script from your system after the installation"

    echo $'\n'
}

function script_Directory_Creation(){
    # Create the script directory if it doesn't exist

    (
    if [[ -d $SCRIPT_DEST_DIR ]]; then
        echo "# Le répertoire $SCRIPT_DEST_DIR existe déjà."
        echo "# Removing scripts from $SCRIPT_DEST_DIR"
        if [[ -f $SCRIPT_DEST_DIR/bloque_utilisateur ]]; then
            sudo rm -f $SCRIPT_DEST_DIR/bloque_utilisateur # check if ok
        fi
        if [[ -f $SCRIPT_DEST_DIR/date-checker ]]; then
            sudo rm -f $SCRIPT_DEST_DIR/date-checker # check if ok
        fi
        echo 30; sleep 0.5
    else
        echo "# Création du répertoire $SCRIPT_DEST_DIR"
        sudo mkdir -p $SCRIPT_DEST_DIR # check if ok
        echo 30; sleep 0.5
    fi

    # Copy the encrypted scripts to the script directory
    echo "# Copie des scripts dans le répertoire $SCRIPT_DEST_DIR"
    sudo mv $WORKING_DIR/bloque_utilisateur $SCRIPT_DEST_DIR # check if ok
    sudo mv $WORKING_DIR/date-checker $SCRIPT_DEST_DIR # check if ok
    echo 100; sleep 1) | zenity --progress \
        --title="Progress" \
        --text="Creating script directory..." \
        --percentage=0 \
        --width=500 \
        --auto-close
}

# purpose: to pass msgs and print them to a log file and terminal
#  - with datetime
#  - the type of msg - INFO, ERROR, DEBUG, WARNING
# usage:
# do_log "INFO some info message"
# do_log "ERROR some error message"
# do_log "DEBUG some debug message"
# do_log "WARNING some warning message"
# depts:
#  - PRODUCT_DIR - the root dir of the sfw project
#  - PRODUCT - the name of the software project dir
#  - host_name - the short hostname of the host / container running on
# 
# from : Yordan Georgiev (stackoverflow)
#------------------------------------------------------------------------------
do_log(){

  print_ok() {
      GREEN_COLOR="\033[0;32m"
      DEFAULT="\033[0m"
      echo -e "${GREEN_COLOR} ✔ [OK] ${1:-} ${DEFAULT}"
  }

  print_warning() {
      YELLOW_COLOR="\033[33m"
      DEFAULT="\033[0m"
      echo -e "${YELLOW_COLOR} ⚠ ${1:-} ${DEFAULT}"
  }

   print_info() {
      BLUE_COLOR="\033[0;34m"
      DEFAULT="\033[0m"
      echo -e "${BLUE_COLOR} ℹ ${1:-} ${DEFAULT}"
  }

  print_fail() {
      RED_COLOR="\033[0;31m"
      DEFAULT="\033[0m"
      echo -e "${RED_COLOR} ❌ [NOK] ${1:-}${DEFAULT}"
  }

  type_of_msg=$(echo $*|cut -d" " -f1)
  msg="$(echo $*|cut -d" " -f2-)"
  log_dir=$LOG_DIR
  log_file=$LOG_DIR$LOG_FILE
  msg=" [$type_of_msg] `date "+%Y-%m-%d %H:%M:%S %Z"` [${PRODUCT:-}][@${host_name:-}] [$$] $msg "
  case "$type_of_msg" in
    'FATAL') print_fail "$msg" | tee -a $log_file ;;
    'ERROR') print_fail "$msg" | tee -a $log_file ;;
    'WARNING') print_warning "$msg" | tee -a $log_file ;;
    'INFO') print_info "$msg" | tee -a $log_file ;;
    'OK') print_ok "$msg" | tee -a $log_file ;;
    *) echo "$msg" | tee -a $log_file ;;
  esac

}

log_Creation
if [[ $? -eq 0 ]]; then
    do_log "OK 0x000 => Log Created successfuly!"
else
    do_log "ERROR Err:0x001 => Failed to create log files. Make sure you have the proper privileges to run this script."
    exit 1
fi
check_Internet_Connection
if [[ $? -eq 0 ]]; then
    do_log "OK 1x000 => This system is connected to the internet"
else
    do_log "FATAL Err:1x001 => Internet connection Failed, Make sure you are connected to internet before running this script"
    exit 1
fi
year_Check
if [[ $? -eq 0 ]]; then
    do_log "OK 2x000 => NTP synchronisation is working."
else
    do_log "FATAL Err:2x001 => Couldn't reach any NTP server for time synchronisation, make sure you are connected to internet before running this script"
    exit 1
fi
file_Creation
if [[ $? -eq 0 ]]; then
    do_log "OK 3x000 => This system is connected to the internet"

else
    do_log "ERROR Err:3x001 => Internet connection Failed, Make sure you are connected to internet before running this script"
    exit 1
fi
scripts_Encription
if [[ $? -eq 0 ]]; then
    do_log "OK 4x000 => Scripts have been encrypted !"
else
    do_log "FATAL Err:4x001 => Script encryption failed, Please refer to the README File for more information on this error"
    exit 1
fi
script_Directory_Creation
if [[ $? -eq 0 ]]; then
    do_log "OK 5x000 => $SCRIPT_DEST_DIR successfuly created"
else
    do_log "ERROR Err:5x001 => Failed to create $SCRIPT_DEST_DIR, make sure you you have the proper privileges to run this script."
    exit 1
fi
service_Creation
if [[ $? -eq 0 ]]; then
    do_log "OK 6x000 => Timeout.Service created Successfully"
else
    do_log "ERROR Err:6x001 => Error during Timeout.Service Creation, Please refer to the README File for more information on this error"
    exit 1
fi
display_Result