#!/bin/bash

clear

echo "############################################################################"
echo "############################################################################"
echo "#####                                                                  #####"
echo "#####              Password expiration management script               #####"
echo "#####                      By KLF pour La Capsule                      #####"
echo "#####                                                                  #####"
echo "############################################################################"
echo "############################################################################"

read -p "Press any key to continue..." -n1 -s


# This script creates an expire.sh file in /etc/profile.d/
# and adds an environment variable END_OF_SERVICE
# which contains the password expiration timestamp


## if year + 1 % 4 = 0 && month > 02 => timestamp 31702400
## if year % 4 = 0 && month < 03 => timestamp 31702400
## else => timestamp 31616000


# Define the timestamps for leap and non-leap years
BIS_TIMESTAMP=31702400
NONBIS_TIMESTAMP=31616000

# Get the current year and month
CURRENT_YEAR=$(date +%Y)
CURRENT_MONTH=$(date +%m)

# Initialize the END_OF_SERVICE variable to 0
END_OF_SERVICE=0;

# Get the current date in seconds since Unix epoch
CURRENT_DATE=$(date +%s)

# Initialize the variable to check internet connection status (0 = not connected)
IS_CONNECTED=0

# Define the directory and file for environment variables
ENV_VAR_DIR=/etc/profile.d/
ENV_VAR_FILE=expire.sh
WORKING_DIR=$(dirname "$(readlink -f "$0")")
SYSTEMD_DIR=/etc/systemd/system
LOG_DIR=/var/log/limitator
LOG_FILE=$LOG_DIR/limitator.log
SCRIPT_DEST_DIR=/opt/bin/


function log_Creation(){
    ## Create the log files and directory if it doesn't exist
    if [[ -d $LOG_DIR ]]; then
        echo "Le répertoire $LOG_DIR existe déjà." 1>$LOG_DIR$LOG_FILE 2>&1
    else
        echo "Création du répertoire $LOG_DIR" 1>$LOG_DIR$LOG_FILE 2>&1
        sudo mkdir -p $LOG_DIR 1>$LOG_DIR$LOG_FILE 2>&1
    fi

    if [[ -f $LOG_DIR$LOG_FILE ]]; then
        echo "Le fichier $LOG_FILE existe déjà." 1>$LOG_DIR$LOG_FILE 2>&1
    else
        echo "Création du fichier $LOG_FILE" 1>$LOG_DIR$LOG_FILE 2>&1
        sudo touch $LOG_DIR$LOG_FILE 1>$LOG_DIR$LOG_FILE 2>&1
        sudo chmod 644 $LOG_DIR$LOG_FILE 1>$LOG_DIR$LOG_FILE 2>&1
    fi
    echo "New entry : $(date +%d-%m-%Y)" > $LOG_DIR$LOG_FILE 1>$LOG_DIR$LOG_FILE 2>&1
}

function file_Creation(){
    ## Create the expire.sh file in /etc/profile.d/ if it doesn't exist
    if [[ -f $ENV_VAR_DIR$ENV_VAR_FILE ]]; then
        echo "Le fichier expire.sh existe déjà." 1>$LOG_DIR$LOG_FILE 2>&1
        echo "Suppression du fichier expire.sh" 1>$LOG_DIR$LOG_FILE 2>&1
        sudo rm -f $ENV_VAR_DIR$ENV_VAR_FILE 1>$LOG_DIR$LOG_FILE 2>&1
        sleep 1
        echo "Création d'un nouveau fichier expire.sh" 1>$LOG_DIR$LOG_FILE 2>&1
        sudo touch $ENV_VAR_DIR$ENV_VAR_FILE 1>$LOG_DIR$LOG_FILE 2>&1
        sudo chmod 744 $ENV_VAR_DIR$ENV_VAR_FILE 1>$LOG_DIR$LOG_FILE 2>&1
        sudo chown root:root $ENV_VAR_DIR$ENV_VAR_FILE 1>$LOG_DIR$LOG_FILE 2>&1
        sleep 1
        echo "Ajout de la variable d'environnement END_OF_SERVICE"
        sudo echo "export END_OF_SERVICE=$END_OF_SERVICE" > /$ENV_VAR_DIR$ENV_VAR_FILE
        sleep 2
        echo "Le fichier expire.sh a été mis à jour avec succès." 1>$LOG_DIR$LOG_FILE 2>&1
    else
        echo "Le fichier expire.sh n'existe pas. Création du fichier."
        sudo touch $ENV_VAR_DIR$ENV_VAR_FILE 1>$LOG_DIR$LOG_FILE 2>&1
        sudo chmod 744 $ENV_VAR_DIR$ENV_VAR_FILE 1>$LOG_DIR$LOG_FILE 2>&1
        sudo chown root:root $ENV_VAR_DIR$ENV_VAR_FILE 1>$LOG_DIR$LOG_FILE 2>&1
        sleep 1
        echo "Ajout de la variable d'environnement END_OF_SERVICE"
        sleep 2
        sudo echo "export END_OF_SERVICE=$END_OF_SERVICE" > $ENV_VAR_DIR$ENV_VAR_FILE
        echo "Le fichier expire.sh a été mis à jour avec succès."
    fi
}

# Function to check if the system is connected to the internet
function check_Internet_Connection(){
    # Use wget to check if Google is reachable (silent mode)
    echo "testing internet connection..." 1>$LOG_DIR$LOG_FILE 2>&1
    wget -q --spider http://google.com 1>$LOG_DIR$LOG_FILE 2>&1

    # Check the exit status of the wget command
    if [ $? -eq 0 ]; then
        # If the exit status is 0, the system is connected to the internet

        echo "Host is connected to internet"
        IS_CONNECTED=1
    else
        echo "No internet connection found, this program need an internet connection to work properly"
        echo "Cancelling installation..."
        sleep 2
        exit 1 1>$LOG_DIR$LOG_FILE 2>&1
    fi
}

## Enable NTP Synchronization
function year_Check(){
    if [[ $IS_CONNECTED == 1 ]]; then
        echo "Enabling time synchronization..." 1>$LOG_DIR$LOG_FILE 2>&1
        sudo timedatectl set-ntp true 1>$LOG_DIR$LOG_FILE 2>&1
        sleep 5
        echo "Ntp synchronization enabled successfully!" 1>$LOG_DIR$LOG_FILE 2>&1
    fi

    # Check if current year is a leap year or not and set the expiration timestamp accordingly
    if (( $CURRENT_YEAR % 4 == 0 )) && (( $CURRENT_MONTH > 2 )); then
        EXPIRE_TIMESTAMP=$BIS_TIMESTAMP 1>$LOG_DIR$LOG_FILE 2>&1
    elif (( $CURRENT_YEAR + 1 % 4 == 0 )) && (( $CURRENT_MONTH < 3 )); then
        EXPIRE_TIMESTAMP=$BIS_TIMESTAMP 1>$LOG_DIR$LOG_FILE 2>&1
    else 
        EXPIRE_TIMESTAMP=$NONBIS_TIMESTAMP 1>$LOG_DIR$LOG_FILE 2>&1
    fi

    END_OF_SERVICE=$(($CURRENT_DATE + $EXPIRE_TIMESTAMP)) 1>$LOG_DIR$LOG_FILE 2>&1
}

function rebooter(){
    echo 'A Reboot is needed to apply the new configuration to the host'
    echo 'reboot now ? [y/N]'
    read answer 1>$LOG_DIR$LOG_FILE 2>&1

    if [[ $answer -eq 'y' ]]; then
        echo "Rebooting now..." 1>$LOG_DIR$LOG_FILE 2>&1
        sleep 2
        sudo reboot 1>$LOG_DIR$LOG_FILE 2>&1
    elif [[ $answer -eq 'n' ]]; then
        echo "Reboot cancelled. You will need to reboot the system manualy to apply the new configuration." 1>$LOG_DIR$LOG_FILE 2>&1
    else
        echo "Invalid response. Please answer with 'y' or 'n'."
        rebooter
    fi
}


function service_Creation(){
    ## Create the timeout.service file in /etc/systemd/system/ if it doesn't exist
    if [[ -f $SYSTEMD_DIR/timeout.service ]]; then
        echo "Le fichier timeout.service existe déjà."
        echo "Suppression du fichier timeout.service" 1>$LOG_DIR$LOG_FILE 2>&1
        sudo rm -f $SYSTEMD_DIR/timeout.service 1>$LOG_DIR$LOG_FILE 2>&1
        sleep 1

        echo "Création d'un nouveau fichier timeout.service" 1>$LOG_DIR$LOG_FILE 2>&1
        ## Copy timeout.service to /etc/systemd/system/
        sudo cp $WORKING_DIR/timeout.service $SYSTEMD_DIR/ 1>$LOG_DIR$LOG_FILE 2>&1
        sudo chmod 644 $SYSTEMD_DIR/timeout.service 1>$LOG_DIR$LOG_FILE 2>&1
    else
        echo "Le fichier timeout.service n'existe pas. Création du fichier." 1>$LOG_DIR$LOG_FILE 2>&1
        ## Copy timeout.service to /etc/systemd/system/
        sudo cp $WORKING_DIR/timeout.service $SYSTEMD_DIR/ 1>$LOG_DIR$LOG_FILE 2>&1
        sudo chmod 644 $SYSTEMD_DIR/timeout.service 1>$LOG_DIR$LOG_FILE 2>&1
    fi

    sleep 2
    echo "Enabling the timeout.service..."
    sudo systemctl enable timeout.service 1>$LOG_DIR$LOG_FILE 2>&1
    if [[ $? -eq 0 ]]; then
        echo "timeout.service enabled successfully!"
    else
        echo "Err:0x005 => Failed to enable timeout.service. Please check the README file for more information, or see https://github.com/KlayFouly/KLFToolBox for detailed information on this error." 1>$LOG_DIR$LOG_FILE 2>&1
        exit 1
    fi
    sleep 1
    echo $'Done\nStarting the timeout.service...' 1>$LOG_DIR$LOG_FILE 2>&1
    sudo systemctl start timeout.service 1>$LOG_DIR$LOG_FILE 2>&1
    sleep 1
    echo "timeout.service started successfully!"
}

function scriptsEncription(){
    if [[ $(dpkg -l | grep shc) ]];then
        echo "shc is already installed" 1>$LOG_DIR$LOG_FILE 2>&1
        echo "Starting the script encryption..." 1>$LOG_DIR$LOG_FILE 2>&1
    fi
    sudo shc -v -r -f $WORKING_DIR/bloque_utilisateur -o $WORKING_DIR/bloque_utilisateur
    sudo shc -v -r -f $WORKING_DIR/date-checker -o $WORKING_DIR/date-checker
    sudo chmod +x $WORKING_DIR/bloque_utilisateur
    sudo chmod +x $WORKING_DIR/date-checker
}

function display_Result(){
    sleep 2
    echo $'\n\n'
    echo "End of service timestamp : $END_OF_SERVICE"
    echo "Ce pc est activé jusqu'au : "$(date -d @$END_OF_SERVICE +%d-%m-%Y)
    echo "Don't forget to remove this script from your system after the installation"

    echo $'\n'
}

log_Creation
check_Internet_Connection 1>$LOG_DIR$LOG_FILE 2>&1
year_Check 1>$LOG_DIR$LOG_FILE 2>&1

file_Creation 1>$LOG_DIR$LOG_FILE 2>&1
scriptsEncription 1>$LOG_DIR$LOG_FILE 2>&1

## Create the script directory if it doesn't exist
if [[ -d $SCRIPT_DEST_DIR ]]; then
    echo "Le répertoire $SCRIPT_DEST_DIR existe déjà." 1>$LOG_DIR$LOG_FILE 2>&1
else
    echo "Création du répertoire $SCRIPT_DEST_DIR" 1>$LOG_DIR$LOG_FILE 2>&1
    sudo mkdir -p $SCRIPT_DEST_DIR 1>$LOG_DIR$LOG_FILE 2>&1
fi

## Copy the encrypted scripts to the script directory
mv $WORKING_DIR/bloque_utilisateur $SCRIPT_DEST_DIR 1>$LOG_DIR$LOG_FILE 2>&1
mv $WORKING_DIR/date-checker $SCRIPT_DEST_DIR 1>$LOG_DIR$LOG_FILE 2>&1

service_Creation 1>$LOG_DIR$LOG_FILE 2>&1

display_Result 1>$LOG_DIR$LOG_FILE 2>&1
rebooter 1>$LOG_DIR$LOG_FILE 2>&1